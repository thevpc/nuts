options {
    STATIC = false ;
}

PARSER_BEGIN(TsonStreamParserImpl)
package net.thevpc.tson.impl.parser.javacc;
import net.thevpc.tson.impl.parser.*;
import net.thevpc.tson.*;

public class TsonStreamParserImpl{
    private TsonStreamParserConfig config;
    private TsonParserVisitor visitor;
    public void setConfig(TsonStreamParserConfig c){
        this.config=c;
        this.visitor=config.getVisitor();
    }

    private boolean visitElementStart(boolean elementStarted){
        if(!elementStarted){
            visitor.visitElementStart();
        }
        return true;
    }

    private boolean visitPrimitiveEnd(boolean elementStarted,TsonElement e){
        visitElementStart(elementStarted);
        visitor.visitPrimitiveEnd(e);
        return true;
    }
    private String prepareComments(String comments){
        if(!config.isRawComments()){
            return TsonParserUtils.parseComments(comments);
        }
        return comments;
    }
}}
}

PARSER_END(TsonStreamParserImpl)

public void parseDocument():
{
    TsonElement x;
}
{
    parseElement() {
        visitor.visitDocumentEnd();
    }
}
public void parseElement():
{
}
{
  elementLevel2()
  |
  <EOF>

}

void elementLevel2() :
{
visitor.visitInstructionStart();
boolean simple=true;
}
{
    (
    elementLevel1()
    (<COLON> elementLevel1() {simple=false;visitor.visitKeyValueEnd();})?
    ){
        if(simple){
            visitor.visitSimpleEnd();
        }
    }

}



void elementLevel1() :
{
    net.thevpc.tson.impl.parser.javacc.Token comments=null;
    boolean elementStarted=false;
}
{
    (comments=<COMMENT> {
            elementStarted=visitElementStart(elementStarted);
            if(!config.isSkipComments()) {
            visitor.visitComments(prepareComments(comments.image));
            }
})?
    (elementStarted=annotation(elementStarted))*
    (
    <NULL> { visitPrimitiveEnd(elementStarted,TsonNullImpl.INSTANCE);}
    | <TRUE>{ visitPrimitiveEnd(elementStarted,TsonBooleanImpl.TRUE);}
    |<FALSE>{  visitPrimitiveEnd(elementStarted,TsonBooleanImpl.FALSE);}
    |<DATETIME> {  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseDateTimeElem(token.image));}
    |<DATE> {  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseDateElem(token.image));}
    |<TIME> {  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseTimeElem(token.image));}
    |<REGEXP> {  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseRegexElem(token.image));}
    |<INTEGER_BYTE>{ visitPrimitiveEnd(elementStarted,TsonParserUtils.parseByteElem(token.image));}
    |<INTEGER_SHORT>{  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseShortElem(token.image));}
    |<INTEGER_LONG>{  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseLongElem(token.image));}
    |<INTEGER_LITERAL>{ visitPrimitiveEnd(elementStarted,TsonParserUtils.parseIntElem(token.image));}
    |<FLOAT_LITERAL>{  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseFloatElem(token.image));}
    |<DOUBLE_LITERAL>{ visitPrimitiveEnd(elementStarted,TsonParserUtils.parseDoubleElem(token.image));}
    |<CHARACTER_LITERAL>{  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseCharElem(token.image));}
    |<STRING_LITERAL> {  visitPrimitiveEnd(elementStarted,TsonParserUtils.parseStringElem(token.image));}
    | object(elementStarted,false)
    | array(elementStarted,false)
    | named(elementStarted)
    | unnamed(elementStarted)
   )
}

boolean annotation(boolean elementStarted) :
{
  Token id;
}
{
    <AT> id=<IDENTIFIER>
    {
        if(!elementStarted){
            visitor.visitElementStart();
        }
        visitor.visitAnnotationStart(id.image);
    }
    <LPAREN>
    (<RPAREN>
         |
         (annotationParam() (<COMMA> annotationParam())*
         <RPAREN>)
    )
    {
         visitor.visitAnnotationEnd();
        return true;
    }
}




boolean named(boolean elementStarted) :
{
  Token id;
    boolean hasPars=false;
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    (id=<IDENTIFIER>
    {
        if(!elementStarted){
            visitor.visitElementStart();
        }
        visitor.visitNamedStart(id.image);
    })
    (
      (unnamed0(true){hasPars=true;}) ?
    )
    (
        (array( true,true){hasArr=true;})
        |(object(true,true){hasObj=true;})
    )?
    {
        if(!hasArr && !hasObj){
            if(!hasPars){
                visitor.visitPrimitiveEnd(Tson.name(id.image));
            }else {
                visitor.visitFunctionEnd();
            }
        }
        return true;
    }
}

void param() :
{
    visitor.visitParamElementStart();
}
{
    elementLevel2()
    {
        visitor.visitParamElementEnd();
    }
}

boolean unnamed(boolean elementStarted) :
{
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    unnamed0(elementStarted)
    (
         (array(true,true){hasArr=true;})
       | (object(true,true){hasObj=true;})
    )?
    {
    if(!hasArr && !hasObj){
            visitor.visitUpletEnd();
    }
    return true;
}
}

boolean unnamed0(boolean elementStarted) :
{
}
{
    (<LPAREN>
    {
        if(!elementStarted){
            visitor.visitElementStart();
        }
    visitor.visitParamsStart(); }
    (
            <RPAREN>
            |
            (
            param()(<COMMA> param()) *
            <RPAREN>
            )
            )
    {visitor.visitParamsEnd(); }
    )
    {
        return true;
    }
}

void objectElement() :
{
    visitor.visitObjectElementStart();
}
{
    elementLevel2()
    {
        visitor.visitObjectElementEnd();
    }
}

void arrayElement() :
{
    visitor.visitArrayElementStart();
}
{
    elementLevel2()
    {
        visitor.visitArrayElementEnd();
    }
}

boolean object(boolean elementStarted,boolean named) :
{
}
{
    <LBRACE> {
        if(!elementStarted){
            visitor.visitElementStart();
        }
        if(named){
            visitor.visitNamedObjectStart();
        }else{
            visitor.visitObjectStart();
        }
    }

    (
        <RBRACE>
        |
        ( objectElement()(<COMMA> objectElement()) *
        <RBRACE>
        )
        )
        {
            if(named){
                visitor.visitNamedObjectEnd();
            }else{
                visitor.visitObjectEnd();
            }
            return true;
        }
}

boolean array(boolean elementStarted,boolean named) :
{
}
{
    <LBRACK>
    {
        if(!elementStarted){
            visitor.visitElementStart();
        }
        if(named){
           visitor.visitNamedArrayStart();
        }else{
            visitor.visitArrayStart();
        }
    }
    (
    <RBRACK>
    |
    ( arrayElement()(<COMMA> arrayElement()) *
    <RBRACK>
    )
    )
    {
         if(named){
              visitor.visitNamedArrayEnd();
         }else{
            visitor.visitArrayEnd();
         }
        return true;
    }
}

void annotationParam() :
{
  visitor.visitAnnotationParamStart();
}
{
  elementLevel2()
  {
    visitor.visitAnnotationParamEnd();
  }
}


TOKEN :
{
    < DATETIME : (
                (["0"-"9"]){4} "-" (["0"-"1"])(["0"-"9"]) "-" (["0"-"3"])(["0"-"9"])
                ["T"](["0"-"9"]){2} ":" (["0"-"9"]){2} ":" (["0"-"9"]){2} ("." (["0"-"9"]){1,9})? ("Z" | ["+","-"](["0"-"9"]){2} ":" (["0"-"9"]){2})
               )
               >
|    < DATE : (
                (["0"-"9"]){4} "-" (["0"-"1"])(["0"-"9"]) "-" (["0"-"3"])(["0"-"9"])
               )
               >
|    < TIME : (
                (["0"-"2"])(["0"-"9"]) ":" (["0"-"5"])(["0"-"9"]) ":" ((["0"-"5"])["0"-"9"]) ("." (["0"-"9"]){1,9})?
               )
               >
|    < REGEXP : "/" ((["\\"] ~["\n"])| (~["*" , "/", "\\"]))*  "/" >
|     < LBRACE : "{" >
|    < RBRACE: "}" >
|    < INTEGER_SHORT: ("-")?["0"-"9"] (["0"-"9"])* ("s"|"S") >
|    < INTEGER_BYTE: ("-")?["0"-"9"] (["0"-"9"])* ("b"|"B") >
|    < INTEGER_LONG: ("-")?["0"-"9"] (["0"-"9"])* ("l"|"L") >
|    < INTEGER_LITERAL: ("-")?["0"-"9"] (["0"-"9"])*>
|    < FLOAT_LITERAL: ("-")?(["0"-"9"])+ "." (["0"-"9"])*
        (  (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>) ("f"|"F")
     >
|    < DOUBLE_LITERAL: ("-")?(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
     >
|    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|    < STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
|    < CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|    < TRUE : "true" >
|    < FALSE : "false" >
|    < NULL : "null" >
//|    < DOT : "." >
|    < LPAREN : "(" >
|    < RPAREN : ")" >
|    < LBRACK : "[" >
|    < RBRACK : "]" >
|    < COLON : ":" >
//|    < SEMICOLON : ";" >
|    < COMMA : "," >
|    < AT : "@" >
//|    < GT0 : ">" >
//|    < GT1 : "gt" >
//|    < LT0 : "<" >
//|    < LT1 : "lt" >
//|    < GE0 : ">=" >
//|    < GE1 : "ge" >
//|    < LE0 : "<=" >
//|    < LE1 : "le" >
//|    < EQ0 : "==" >
//|    < EQ1 : "eq" >
//|    < NE0 : "!=" >
//|    < NE1 : "ne" >
//|    < NOT0 : "!" >
//|    < NOT1 : "not" >
//|    < AND0 : "&&" >
//|    < AND1 : "and" >
//|    < OR0 : "||" >
//|    < OR1 : "or" >
//|    < EMPTY : "empty" >
//|    < INSTANCEOF : "instanceof" >
//|    < MULT : "*" >
//|    < PLUS : "+" >
//|    < MINUS : "-" >
//|    < QUESTIONMARK : "?" >
//|    < DIV0 : "/" >
//|    < DIV1 : "div" >
//|    < MOD0 : "%" >
//|    < MOD1 : "mod" >
//|    < CONCAT : "+=" >
//|    < ASSIGN : "=" >
//|    < ARROW : "->" >
|    < COMMENT : "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|    < IDENTIFIER : ((<LETTER> | "_") (<LETTER>| <DIGIT> | "_") *) ("." ((<LETTER>| "_") (<LETTER>| <DIGIT> | "_") *))* >
|    < #LETTER:
        [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
        ]
    >
|    < #DIGIT:
        [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
        ]
    >
}

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
}
