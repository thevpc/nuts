options {
    STATIC = false ;
}

PARSER_BEGIN(TsonStreamParserImpl)
import net.thevpc.tson.impl.parser.*;
import net.thevpc.tson.*;

public class TsonStreamParserImpl implements TsonStreamParser{
    private TsonStreamParserConfig config;
    private TsonParserVisitor visitor;
    public void setConfig(TsonStreamParserConfig c){
        this.config=c;
        this.visitor=config.getVisitor();
    }

    private String prepareComments(String comments){
        if(!config.isRawComments()){
            return TsonParserUtils.parseComments(comments);
        }
        return comments;
    }
}}
}

PARSER_END(TsonStreamParserImpl)

public void parseDocument():
{
}
{
    parseElement() {
        visitor.visitDocumentEnd();
    }
}
public void parseElement():
{
}
{
  elementLevel2()
  |
  <EOF>

}

void elementLevel2() :
{
visitor.visitInstructionStart();
boolean simple=true;
}
{
    (
    elementLevel1()
    (<COLON> elementLevel1() {simple=false;visitor.visitKeyValueEnd();})?
    ){
        if(simple){
            visitor.visitSimpleEnd();
        }
    }

}



void elementLevel1() :
{
    net.thevpc.tson.impl.parser.javacc.Token comments=null;
    visitor.visitElementStart();
}
{
    (comments=<COMMENT> {
            if(!config.isSkipComments()) {
            visitor.visitComments(prepareComments(comments.image));
            }
})?
    (annotation())*
    (
    <NULL> { visitor.visitPrimitiveEnd(TsonNullImpl.INSTANCE);}
    | <TRUE>{ visitor.visitPrimitiveEnd(TsonBooleanImpl.TRUE);}
    |<FALSE>{  visitor.visitPrimitiveEnd(TsonBooleanImpl.FALSE);}
    |<DATETIME> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseDateTimeElem(token.image));}
    |<DATE> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseDateElem(token.image));}
    |<TIME> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseTimeElem(token.image));}
    |<REGEX> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseRegexElem(token.image));}
    |<BYTE>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseByteElem(token.image));}
    |<SHORT>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseShortElem(token.image));}
    |<LONG>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseLongElem(token.image));}
    |<INTEGER>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseIntElem(token.image));}
    |<FLOAT>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseFloatElem(token.image));}
    |<DOUBLE>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseDoubleElem(token.image));}
    |<CHARACTER>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseCharElem(token.image));}
    |<STRING> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image));}
    | object(false)
    | array(false)
    | named()
    | unnamed()
   )
}

void annotation() :
{
  Token id;
}
{
    <AT> id=<NAME>
    {
        visitor.visitAnnotationStart(id.image);
    }
    <LPAREN>
    (<RPAREN>
         |
         (annotationParam() (<COMMA> annotationParam())*
         <RPAREN>)
    )
    {
         visitor.visitAnnotationEnd();
    }
}




void named() :
{
  Token id;
    boolean hasPars=false;
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    (id=<NAME>
    {
        visitor.visitNamedStart(id.image);
    })
    (
      (unnamed0(){hasPars=true;}) ?
    )
    (
        (array( true){hasArr=true;})
        |(object(true){hasObj=true;})
    )?
    {
        if(!hasArr && !hasObj){
            if(!hasPars){
                visitor.visitPrimitiveEnd(Tson.name(id.image));
            }else {
                visitor.visitFunctionEnd();
            }
        }
    }
}

void param() :
{
    visitor.visitParamElementStart();
}
{
    elementLevel2()
    {
        visitor.visitParamElementEnd();
    }
}

void unnamed() :
{
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    unnamed0()
    (
         (array(true){hasArr=true;})
       | (object(true){hasObj=true;})
    )?
    {
    if(!hasArr && !hasObj){
            visitor.visitUpletEnd();
    }
}
}

void unnamed0() :
{
}
{
    (<LPAREN>
    {
    visitor.visitParamsStart(); }
    (
            <RPAREN>
            |
            (
            param()(<COMMA> param()) *
            <RPAREN>
            )
            )
    {visitor.visitParamsEnd(); }
    )
}

void objectElement() :
{
    visitor.visitObjectElementStart();
}
{
    elementLevel2()
    {
        visitor.visitObjectElementEnd();
    }
}

void arrayElement() :
{
    visitor.visitArrayElementStart();
}
{
    elementLevel2()
    {
        visitor.visitArrayElementEnd();
    }
}

void object(boolean named) :
{
}
{
    <LBRACE> {
        if(named){
            visitor.visitNamedObjectStart();
        }else{
            visitor.visitObjectStart();
        }
    }

    (
        <RBRACE>
        |
        ( objectElement()(<COMMA> objectElement()) *
        <RBRACE>
        )
        )
        {
            if(named){
                visitor.visitNamedObjectEnd();
            }else{
                visitor.visitObjectEnd();
            }
        }
}

void array(boolean named) :
{
}
{
    <LBRACK>
    {
        if(named){
           visitor.visitNamedArrayStart();
        }else{
            visitor.visitArrayStart();
        }
    }
    (
    <RBRACK>
    |
    ( arrayElement()(<COMMA> arrayElement()) *
    <RBRACK>
    )
    )
    {
         if(named){
              visitor.visitNamedArrayEnd();
         }else{
            visitor.visitArrayEnd();
         }
    }
}

void annotationParam() :
{
  visitor.visitAnnotationParamStart();
}
{
  elementLevel2()
  {
    visitor.visitAnnotationParamEnd();
  }
}


TOKEN :
{
    < DATETIME : (
                (<DIGIT>){4} "-" (<DIGIT>){2} "-" (<DIGIT>){2}
                ["T"](<DIGIT>){2} ":" (<DIGIT>){2} ":" (<DIGIT>){2} ("." (<DIGIT>){1,9})? ("Z" | ["+","-"](<DIGIT>){2} ":" (<DIGIT>){2})
               )
               >
|    < DATE : (
                ((<DIGIT>)){4} "-" ((<DIGIT>)){2} "-" (<DIGIT>){2}
               )
               >
|    < TIME : (
                ((<DIGIT>)){2} ":" ((<DIGIT>)){2} ":" ((<DIGIT>)){2} ("." ((<DIGIT>)){1,9})?
               )
               >
|    < REGEX : "/" ((["\\"] ~["\n"])| (~["*" , "/", "\\"]))*  "/" >
|     < LBRACE : "{" >
|    < RBRACE: "}" >
|    < SHORT: ("-")?<DIGIT> (<DIGIT>)* ("s"|"S") >
|    < BYTE: ("-")?<DIGIT> (<DIGIT>)* ("b"|"B") >
|    < LONG: ("-")?<DIGIT> (<DIGIT>)* ("l"|"L") >
|    < INTEGER: ("-")?<DIGIT> (<DIGIT>)*>
|    < FLOAT: ("-")?(<DIGIT>)+ "." (<DIGIT>)*
        (  (<EXPONENT>)?
        | "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+ <EXPONENT>) ("f"|"F")
     >
|    < DOUBLE: ("-")?(<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
        | "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+ <EXPONENT>
     >
|    < #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ >
|    < STRING: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
|    < CHARACTER: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|    < TRUE : "true" >
|    < FALSE : "false" >
|    < NULL : "null" >
//|    < DOT : "." >
|    < LPAREN : "(" >
|    < RPAREN : ")" >
|    < LBRACK : "[" >
|    < RBRACK : "]" >
|    < COLON : ":" >
//|    < SEMICOLON : ";" >
|    < COMMA : "," >
|    < AT : "@" >
|    < COMMENT : "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|    < NAME : ((<LETTER> | "_") (<LETTER>| <DIGIT> | "_") *) ("." ((<LETTER>| "_") (<LETTER>| <DIGIT> | "_") *))* >
|    < #LETTER:
        ["a"-"z","A"-"Z"]
    >
|    < #DIGIT:
        ["0"-"9"]
    >
}

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
}
